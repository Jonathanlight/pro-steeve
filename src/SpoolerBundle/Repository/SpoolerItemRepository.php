<?php

namespace SpoolerBundle\Repository;

use ExperienceBundle\Entity\Experience;
use SpoolerBundle\Entity\SpoolerItem;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * SpoolerItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpoolerItemRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUserWaitingSpoolerItem(UserInterface $user = null){
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.status != 2')
            ->andWhere('s.user = :user')
            ->setParameter('user', $user);

        /**
         * @Todo Ligne à supprimer après test
         */
        return array();
        return $qb->getQuery()->getResult();
    }

    public function returnStatusCheck(Experience $experience){
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.status = 1')
            ->andWhere('s.experience = :experience')
            ->setParameter('experience', $experience);
        return  $qb->getQuery()->getResult();
    }

    /**
     * @param SpoolerItem $spoolerItem
     * @return mixed
     */
    public function getUsedMemoryOnServer(SpoolerItem $spoolerItem){
        $qb = $this->createQueryBuilder('spooler_item');
        $qb->select('SUM(experience.requiredMemory)')
            ->where('spooler_item.status = 1')
            ->innerJoin('spooler_item.experience', 'experience')
            ->innerJoin('experience.support', 'support')
            ->innerJoin('experience.experienceType', 'experience_type')
            ->andWhere('experience_type.id = 2')
            ->andWhere('experience.support = :support')
            ->setParameter('support', $spoolerItem->getExperience()->getSupport());
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function isSpoolerItemSupportAvailable(SpoolerItem $spoolerItem){
        $qb = $this->createQueryBuilder('spooler_item');
        $qb->innerJoin('spooler_item.experience', 'experience')
            ->innerJoin('experience.support', 'support')
            ->innerJoin('experience.experienceType', 'experience_type')
            ->where('support.id = :supportId')
            ->setParameter('supportId', $spoolerItem->getExperience()->getSupport()->getId())
            ->andWhere('spooler_item.status = 1')
            ->andWhere('experience_type.id = 1');

        $result = $qb->getQuery()->getResult();
        return ($result) ? false : true;
    }

    public function waitingSpoolerItems(SpoolerItem $spoolerItem){
        $qb = $this->createQueryBuilder('spooler_item');
        $qb->innerJoin('spooler_item.experience', 'experience')
            ->where('spooler_item.status = 0')
            ->andWhere('experience.id = :experienceId')
            ->setParameter('experienceId', $spoolerItem->getExperience()->getId())
            ->orderBy('spooler_item.id', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function waitingAndProcessingSpoolerItems(SpoolerItem $spoolerItem){
        $qb = $this->createQueryBuilder('spooler_item');
        $qb->innerJoin('spooler_item.experience', 'experience')
            ->where('spooler_item.status != 2')
            ->andWhere('experience.id = :experienceId')
            ->setParameter('experienceId', $spoolerItem->getExperience()->getId())
            ->orderBy('spooler_item.id', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $parameters
     * @return Int|boolean
     */
    public function findAnswer($parameters){
      $qb = $this->createQueryBuilder('si');

      foreach ($parameters as $parameterID => $parameter):
        $qb->innerJoin('si.requestedParameters','rp'.$parameterID);
        $qb->innerJoin('rp'.$parameterID.'.parameter','p'.$parameterID);
        $qb->andWhere('p'.$parameterID.'.id = :id'.$parameterID);
        $qb->setParameter('id'.$parameterID, $parameterID);
        $qb->andWhere('rp'.$parameterID.'.value = :val'.$parameterID);
        $qb->setParameter('val'.$parameterID, $parameter);
      endforeach;

      $spoolerItem = $qb->getQuery()->getResult();
      $spoolerItem = $spoolerItem===null||empty($spoolerItem)?null:$spoolerItem[0];
      /**
       * @var SpoolerItem|null $spoolerItem
       */
      if($spoolerItem === null):
        return false;
      endif;

      return $spoolerItem->getId();
    }
}
